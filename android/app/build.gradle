def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

project.ext.envConfigFiles = [
        dev : ".env.dev",
        prod: ".env.prod"
]

apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

android {
    compileSdkVersion 31

    // lintOptions {
    //      checkReleaseBuilds false
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.nut_flutter"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        //  this is defined for flutter config 
        resValue "string", "build_config_package", "com.example.nut_flutter"
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            def alias = System.getenv("SIGNING_KEY_ALIAS_DEBUG")
            def pass = System.getenv("SIGNING_PASSWORD_DEBUG")

            if(alias != null && pass != null){
                // Build with git action.
                def debugKeyFilePath = System.getProperty("user.home") + "/work/_temp/keystore/debug.keystore"
                def keystoreFile = new File(debugKeyFilePath)
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
                
            }else{

                keyAlias localProperties.getProperty('debugAlias')
                keyPassword localProperties.getProperty('debugKeyPass')
                storeFile localProperties.getProperty('debugKeyStoreFile') ? file(localProperties.getProperty('debugKeyStoreFile')) : null
                storePassword localProperties.getProperty('debugStorePass')
            
            }
        }

        release {
            def alias = System.getenv("SIGNING_KEY_ALIAS_RELEASE")
            def pass = System.getenv("SIGNING_PASSWORD_RELEASE")

            if (alias != null && pass != null) {
                // Build with git action.
                def releaseKeyFilePath = System.getProperty("user.home") + "/work/_temp/keystore/uploadkey.jks"
                def keystoreFile = new File(debugKeyFilePath)
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
            }

            keyAlias localProperties.getProperty('releaseAlias')
            keyPassword localProperties.getProperty('releaseKeyPass')
            storeFile localProperties.getProperty('releaseKeyStoreFile') ? file(localProperties.getProperty('releaseKeyStoreFile')) : null
            storePassword localProperties.getProperty('releaseStorePass')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "Dev Flavortest"
            versionNameSuffix "-dev"
        }
        prod {
            dimension "app"
            resValue "string", "app_name", "FlavorTest"
            applicationId "com.example.nut_flutter.prod"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation 'com.google.firebase:firebase-analytics'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'

}

apply plugin: 'com.google.gms.google-services'
